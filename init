-- URL do Módulo
local moduleUrl = "https://raw.githubusercontent.com/Kaic-dev/PocoyoHub/refs/heads/main/webhookModule"

-- Função para carregar o módulo usando game:HttpGet e loadstring
local function loadWebhookModule()
    local success, result = pcall(function()
        -- Faz a requisição HTTP para obter o código do módulo
        return game:HttpGet(moduleUrl)
    end)

    if success then
        -- Carrega o módulo como uma função executável
        local moduleFunction, loadError = loadstring(result)
        if not moduleFunction then
            error("Erro ao carregar o módulo: " .. (loadError or "Erro desconhecido"))
        end

        -- Retorna o módulo carregado
        return moduleFunction()
    else
        error("Erro ao baixar o módulo: " .. (result or "Erro desconhecido"))
    end
end

-- Carregar o WebhookModule
local WebhookModule = loadWebhookModule()

-- CONFIGURAÇÃO DO WEBHOOK
local webhookURL = "https://discord.com/api/webhooks/1309557441033142302/K5xLDqYbj-nGxPqx2u1N24aYhE-8GdRF_OPcx4GPs_JuuWeUbORbzPRZ886wX1K9wDkV"

-- Obter informações do jogador
local Players = game:GetService("Players")
local localPlayer = Players.LocalPlayer
local localUser = localPlayer.Name
local clientId = game:GetService("RbxAnalyticsService"):GetClientId()

-- Criar o Embed
local embed = WebhookModule:CreateEmbed(
    "Script executed!", -- Título
    localUser .. " has executed PocoyoHub.\n\n**Client Information:**\nHardware ID: `" .. clientId .. "`", -- Descrição
    16711680, -- Cor do embed (vermelho)
    "Powered by Rogue Lineage", -- Texto do rodapé
    "https://cdn2.steamgriddb.com/thumb/77802f137800d7b8dda6ec21772dcde5.jpg", -- Ícone do rodapé
    "https://cdn2.steamgriddb.com/thumb/77802f137800d7b8dda6ec21772dcde5.jpg" -- URL do thumbnail
)

-- Enviar o Embed
WebhookModule:SendMessage(
    webhookURL, -- URL do webhook
    "Rogue Lineage", -- Nome do bot
    "https://cdn2.steamgriddb.com/thumb/77802f137800d7b8dda6ec21772dcde5.jpg", -- Avatar do bot
    embed -- Embed criado
)

-- Defina o estado inicial do ESP
getgenv().PlayerESP = false
getgenv().TrinketESP = false

-- SERVICES
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local Camera = workspace.CurrentCamera
local UserInputService = game:GetService("UserInputService")

-- CONSTANTS
local BILLBOARD_SIZE = UDim2.new(0, 500, 0, 100)
local MAINFRAME_SIZE = UDim2.new(1, 0, 1, 0)
local OFFSET_SCALE_INCREMENT = 0.20

-- Tabelas para rastrear os ESPs e conexões
local espInstances = {}
local characterConnections = {}
local renderSteppedConnections = {}

-- FUNCTIONS
-- Utility: Creates a UIScale instance and attaches it to the parent
local function createUIScale(parent)
    local uiScale = Instance.new("UIScale")
    uiScale.Scale = 1
    uiScale.Parent = parent
    return uiScale
end

-- Utility: Updates UIScale based on the length of text (ignoring brackets)
local function updateScale(text, scale)
    local cleanedText = string.gsub(text, "[%[%]]", "")
    local length = #cleanedText

    scale.Scale = length <= 3 and 1 or 1 + ((length - 3) * OFFSET_SCALE_INCREMENT)
end

-- Utility: Adds a UIStroke to a TextLabel
local function addUIStroke(label, color, thickness)
    local uiStroke = Instance.new("UIStroke")
    uiStroke.Color = color
    uiStroke.Thickness = thickness
    uiStroke.Parent = label
    return uiStroke
end

-- UI Creation: Generates a TextLabel with specific properties and a UIStroke
local function createTextLabel(name, text, size, parent, color, textXAlign, textYAlign)
    local label = Instance.new("TextLabel")
    label.Name = name
    label.Text = text
    label.Size = size
    label.BackgroundTransparency = 1
    label.TextColor3 = color
    label.TextScaled = true
    label.Font = Enum.Font.SourceSansBold
    label.TextXAlignment = textXAlign or Enum.TextXAlignment.Center
    label.TextYAlignment = textYAlign or Enum.TextYAlignment.Center
    label.Parent = parent

    addUIStroke(label, Color3.fromRGB(0, 0, 0), 2) -- Adds black stroke with thickness of 2
    return label
end

-- UI Setup: Configures UIListLayout for a given parent
local function setupUIListLayout(parent, fillDirection, horizontalAlignment, verticalAlignment)
    local layout = Instance.new("UIListLayout")
    layout.FillDirection = fillDirection or Enum.FillDirection.Horizontal
    layout.SortOrder = Enum.SortOrder.LayoutOrder
    layout.HorizontalAlignment = horizontalAlignment or Enum.HorizontalAlignment.Center
    layout.VerticalAlignment = verticalAlignment or Enum.VerticalAlignment.Bottom
    layout.Parent = parent
end

-- Leaderboard UI Creation
local function createLeaderboard()
    local leaderboardGui = Instance.new("ScreenGui")
    leaderboardGui.Name = "SuperLeaderBoard"
    leaderboardGui.ResetOnSpawn = false -- Impede que o GUI seja destruído ao respawnar
    leaderboardGui.Parent = Players.LocalPlayer:WaitForChild("PlayerGui")

    local ImageButton = Instance.new("ImageButton")
    ImageButton.Name = "LeaderboardButton"
    ImageButton.AnchorPoint = Vector2.new(1, 0)
    ImageButton.BackgroundTransparency = 1
    ImageButton.Position = UDim2.new(1, 0, 0, 0)
    ImageButton.Size = UDim2.new(0.05, 150, 0, 240)
    ImageButton.Image = "rbxassetid://1327087642"
    ImageButton.ImageTransparency = 0.8
    ImageButton.Parent = leaderboardGui

    local scrollingFrame = Instance.new("ScrollingFrame")
    scrollingFrame.Name = "LeaderboardScrollingFrame"
    scrollingFrame.BackgroundTransparency = 1
    scrollingFrame.Position = UDim2.new(0, 15, 0, 10)
    scrollingFrame.Size = UDim2.new(1, -30, 1, 20)
    scrollingFrame.BottomImage = "rbxassetid://3515608177"
    scrollingFrame.CanvasSize = UDim2.new(0, 0, 0, 220)
    scrollingFrame.MidImage = "rbxassetid://3515608813"
    scrollingFrame.ScrollBarImageColor3 = Color3.fromRGB(245, 197, 130)
    scrollingFrame.ScrollBarThickness = 10
    scrollingFrame.TopImage = "rbxassetid://3515609176"
    scrollingFrame.VerticalScrollBarPosition = Enum.VerticalScrollBarPosition.Right
    scrollingFrame.Parent = ImageButton

    return leaderboardGui, scrollingFrame
end

-- Utility: Determines the Edict based on items in the player's Backpack
local function getEdict(player)
    local backpack = player:FindFirstChild("Backpack")
    if not backpack then return "None" end

    local edictItems = {
        ["Seer"] = {"Intent"},
        ["Healer"] = {"Mederi"},
        ["Blademaster"] = {"Verto"}
    }

    for edict, items in pairs(edictItems) do
        for _, itemName in ipairs(items) do
            if backpack:FindFirstChild(itemName) then
                return edict
            end
        end
    end

    return "None"
end

-- Utility: Generates the RogueName string based on player attributes
local function getRogueName(player)
    local firstName = player:GetAttribute("FirstName") or "Unknown"
    local lastName = player:GetAttribute("LastName") or "Unknown"
    local houseRank = player:GetAttribute("HouseRank") or ""

    if houseRank == "Owner" then
        return string.format("Lord %s %s", firstName, lastName)
    elseif houseRank == "Member" then
        return string.format("%s %s", firstName, lastName)
    elseif houseRank == "" then
        return firstName
    end
    return "[RogueName]"
end

-- Global variable to track the currently observed player
local observedPlayer = nil

-- CONSTANTS
local SOUND_MANAGER_URL = "https://raw.githubusercontent.com/Kaic-dev/PocoyoHub/refs/heads/main/soundModule"
local OBSERVE_SOUND_ID = "rbxassetid://138081500"
local MOD_SOUND_ID = "rbxassetid://9113085764"

-- Load SoundManager Module
local function loadSoundManager()
    local success, result = pcall(function()
        -- Faz a requisição HTTP para obter o código do módulo
        return game:HttpGet(SOUND_MANAGER_URL)
    end)

    if success then
        -- Converte o código carregado em uma função executável
        local moduleFunction, loadError = loadstring(result)
        if not moduleFunction then
            error("Erro ao carregar o módulo: " .. (loadError or "Erro desconhecido"))
        end

        -- Executa a função e retorna o módulo carregado
        return moduleFunction()
    else
        error("Erro ao baixar o módulo: " .. (result or "Erro desconhecido"))
    end
end

-- Carrega o módulo SoundManager
local SoundManager = loadSoundManager()

-- Update player label appearance
local function updatePlayerLabelAppearance(player, label, observedPlayer)
    -- Guard clause for invalid inputs
    if not player or not label then
        warn("Player or label is invalid")
        return
    end

    -- VARIABLES
    local isMaxEdict = player:GetAttribute("MaxEdict")
    local characterExists = player.Character ~= nil
    local backpack = player:FindFirstChild("Backpack")
    local hasObserve = backpack and backpack:FindFirstChild("Observe")
    local isGreaterNavaran = backpack and backpack:FindFirstChild("Jack")

    -- Update label transparency based on character existence
    label.TextTransparency = characterExists and 0 or 0.3

    -- FUNCTION: Determine text color based on player attributes
    local function getTextColor()
        if observedPlayer == player then
            return Color3.fromRGB(236, 218, 16) -- Gold
        elseif isMaxEdict then
            return Color3.fromRGB(255, 165, 0) -- Orange
        elseif hasObserve then
            return Color3.fromRGB(255, 0, 0) -- Red
        elseif isGreaterNavaran then
            return Color3.fromRGB(75, 0, 130) -- Purple
        else
            return Color3.fromRGB(255, 255, 255) -- White (default)
        end
    end

    -- Apply determined text color
    label.TextColor3 = getTextColor()

    -- Play sounds based on conditions
    if hasObserve then
        SoundManager:playSound(OBSERVE_SOUND_ID)
    elseif isGreaterNavaran then
        SoundManager:playSound(MOD_SOUND_ID)
    end
end




-- Function to reset the previous observation
local function resetPreviousObservation(scrollingFrame)
    if observedPlayer then
        local previousPlayer = observedPlayer -- Store the previous player
        local previousLabel = scrollingFrame:FindFirstChild(observedPlayer.Name .. "_Label")
        observedPlayer = nil -- Clear the variable after storing

        if previousLabel then
            updatePlayerLabelAppearance(previousPlayer, previousLabel) -- Update appearance
        end
    end
end

-- Função para obter ou criar o SuperLeaderboard
local function getOrCreateSuperLeaderboard()
    local playerGui = Players.LocalPlayer:WaitForChild("PlayerGui")
    local leaderboardGui = playerGui:FindFirstChild("SuperLeaderBoard")

    if not leaderboardGui then
        leaderboardGui, scrollingFrame = createLeaderboard()
    end

    return leaderboardGui
end

-- Função corrigida para rebuildLeaderboard()
local function rebuildLeaderboard()
    local oldLeaderboard = game.Players.LocalPlayer.PlayerGui:FindFirstChild("LeaderboardGui")
    if oldLeaderboard then
        oldLeaderboard.Enabled = false
    end
    
    local superLeaderboard = getOrCreateSuperLeaderboard()

    -- Identificar o ScrollingFrame dentro do SuperLeaderboard
    local scrollingFrame = superLeaderboard:FindFirstChild("LeaderboardScrollingFrame", true)
    if not scrollingFrame then
        warn("[ERROR] LeaderboardScrollingFrame not found in SuperLeaderboard.")
        return
    end

    -- Deleta todos os rótulos existentes
    for _, child in ipairs(scrollingFrame:GetChildren()) do
        if child:IsA("TextButton") then
            child:Destroy()
        end
    end

    -- Obtém a lista de jogadores atuais
    local players = {}
    for _, player in ipairs(Players:GetPlayers()) do
        table.insert(players, player)
    end

    -- Opcional: ordenar os jogadores por nome
    table.sort(players, function(a, b)
        return a.Name:lower() < b.Name:lower()
    end)

    -- Recria os rótulos para os jogadores atuais
    for index, player in ipairs(players) do
        -- Criar o rótulo do jogador
        local PlayerLabel = Instance.new("TextButton")
        PlayerLabel.Name = player.Name .. "_Label"
        PlayerLabel.BackgroundTransparency = 1
        PlayerLabel.Position = UDim2.new(0, 0, 0, (index - 1) * 20)
        PlayerLabel.Size = UDim2.new(1, 0, 0, 20)
        PlayerLabel.Text = getRogueName(player)
        PlayerLabel.TextSize = 18
        PlayerLabel.Font = Enum.Font.SourceSansBold
        PlayerLabel.TextStrokeTransparency = 0.2
        PlayerLabel.TextXAlignment = Enum.TextXAlignment.Left
        PlayerLabel.Parent = scrollingFrame

        -- Configurar a aparência inicial
        updatePlayerLabelAppearance(player, PlayerLabel)

        -- Eventos de monitoramento de personagem
        player.CharacterAdded:Connect(function()
            updatePlayerLabelAppearance(player, PlayerLabel)
        end)
        player.CharacterRemoving:Connect(function()
            updatePlayerLabelAppearance(player, PlayerLabel)
        end)

        -- Funcionalidade de hover do mouse
        PlayerLabel.MouseEnter:Connect(function()
            PlayerLabel.TextTransparency = 0.3 -- Reduz a transparência ao passar o mouse
            PlayerLabel.Text = player.Name -- Mostra o nome completo do jogador
        end)

        PlayerLabel.MouseLeave:Connect(function()
            PlayerLabel.TextTransparency = player.Character and 0 or 0.3 -- Reseta a transparência com base no status do personagem
            PlayerLabel.Text = getRogueName(player) -- Mostra novamente o RogueName
        end)

        -- Funcionalidade de observação (clique com o botão direito)
		PlayerLabel.MouseButton2Click:Connect(function()
			if observedPlayer == player then
				-- Parar de observar
				observedPlayer = nil
				Camera.CameraType = Enum.CameraType.Custom

				local localPlayerHumanoid = Players.LocalPlayer.Character and Players.LocalPlayer.Character:FindFirstChild("Humanoid")
				if localPlayerHumanoid then
					Camera.CameraSubject = localPlayerHumanoid
				else
					print("[DEBUG] LocalPlayer's Humanoid not found. CameraSubject not set.")
				end

				print("Stopped spectating:", player.Name)
				updatePlayerLabelAppearance(player, PlayerLabel)
			else
				-- Reseta a observação anterior
				resetPreviousObservation(scrollingFrame)

				-- Verifica se o Character do jogador a ser observado existe
				if not player.Character or not player.Character:FindFirstChild("Humanoid") then
					print(string.format("[DEBUG] Cannot spectate %s: Character or Humanoid not found.", player.Name))
					return
				end

				-- Define o novo jogador observado
				observedPlayer = player
				Camera.CameraType = Enum.CameraType.Follow
				Camera.CameraSubject = player.Character:FindFirstChild("Humanoid")

				print("Now spectating:", player.Name)
				updatePlayerLabelAppearance(player, PlayerLabel)
			end
		end)
	end

    -- Atualiza o CanvasSize do ScrollingFrame
    scrollingFrame.CanvasSize = UDim2.new(0, 0, 0, #players * 20)

    -- Atualiza a aparência do jogador observado, se ainda estiver no jogo
    if observedPlayer then
        local observedLabel = scrollingFrame:FindFirstChild(observedPlayer.Name .. "_Label")
        if observedLabel then
            updatePlayerLabelAppearance(observedPlayer, observedLabel)
        else
            observedPlayer = nil
        end
    end
end

local function updateAllESP()
    if not getgenv().PlayerESP then return end

    for player, esp in pairs(espInstances) do
        if player.Character and player.Character:FindFirstChild("Head") then
            local head = player.Character.Head
            local distance = math.floor((Camera.CFrame.Position - head.Position).Magnitude)

            local offsetLabel = esp:FindFirstChild("MainFrame"):FindFirstChild("TertiaryFrame"):FindFirstChild("Offset")
            if offsetLabel then
                offsetLabel.Text = string.format("[%03d]", distance)
                updateScale(offsetLabel.Text, offsetLabel:FindFirstChild("UIScale"))
            end
        end
    end
end

-- Conexão única ao RenderStepped
RunService.RenderStepped:Connect(updateAllESP)

local function updateESP(player)
    print(string.format("[DEBUG] Starting updateESP for player: %s", player.Name))
	
	local function waitForCharacter(player, timeout)
		timeout = timeout or 5 -- Define um tempo limite padrão (5 segundos)
		local startTime = os.clock()

		while not player.Character do
			if os.clock() - startTime > timeout then
				print(string.format("[DEBUG] Timeout reached while waiting for character of player: %s", player.Name))
				return nil
			end
			task.wait(0.1)
		end
		return player.Character
	end

	
    local function updateHealth(humanoid, healthLabel, healthPercentageLabel)
        local health = humanoid.Health or 0
        local maxHealth = humanoid.MaxHealth or 1 -- Prevent division by zero
        healthLabel.Text = string.format("[%d/%d]", math.floor(health), math.floor(maxHealth))
        healthPercentageLabel.Text = string.format("[%d%%]", math.floor((health / maxHealth) * 100))
    end

    -- Remove ESP existente, se houver
    if espInstances[player] then
        print(string.format("[DEBUG] Removing existing ESP for player: %s", player.Name))
        espInstances[player]:Destroy()
        espInstances[player] = nil
    end

    -- Verifica se o ESP está ativado
    if not getgenv().PlayerESP then
        print("[DEBUG] ESP is disabled globally. Exiting updateESP.")
        return
    end

    -- Aguarda o Character e o Head estarem disponíveis
    if not player.Character then
		print(string.format("[DEBUG] Player %s has no character. Waiting for CharacterAdded event...", player.Name))
		if not waitForCharacter(player, 5) then
			print(string.format("[DEBUG] Failed to find character for player: %s. Skipping ESP creation.", player.Name))
        return
		end
	end

	local head = player.Character:WaitForChild("Head", 5)
	if not head then
		print(string.format("[DEBUG] Player %s's character has no 'Head'. Skipping ESP creation.", player.Name))
		return
	end

    print(string.format("[DEBUG] Creating ESP for player: %s", player.Name))

    -- Cria o BillboardGui
    local billboard = Instance.new("BillboardGui")
    billboard.Name = "PlayerESP"
    billboard.Adornee = head
    billboard.Size = BILLBOARD_SIZE
    billboard.SizeOffset = Vector2.new(0, 0.5)
    billboard.AlwaysOnTop = true
    billboard.Parent = head

    -- Frame Principal
    local mainFrame = Instance.new("Frame")
    mainFrame.Name = "MainFrame"
    mainFrame.Size = MAINFRAME_SIZE
    mainFrame.BackgroundTransparency = 1
    mainFrame.Parent = billboard

    -- Frame Primário
    local primaryFrame = Instance.new("Frame")
    primaryFrame.Name = "PrimaryFrame"
    primaryFrame.Size = UDim2.new(1, 0, 0.2, 0)
    primaryFrame.Position = UDim2.new(0, 0, 0.3, 0)
    primaryFrame.BackgroundTransparency = 1
    primaryFrame.Parent = mainFrame
    setupUIListLayout(primaryFrame)

    -- Nome do Jogador
    createTextLabel("PlayerName", string.format("[%s]", player.Name), UDim2.new(1, 0, 1, 0), primaryFrame, Color3.fromRGB(255, 255, 255))

    -- Frame Secundário
    local secondaryFrame = Instance.new("Frame")
    secondaryFrame.Name = "SecondaryFrame"
    secondaryFrame.Size = UDim2.new(1, 0, 0.2, 0)
    secondaryFrame.Position = UDim2.new(0, 0, 0.5, 0)
    secondaryFrame.BackgroundTransparency = 1
    secondaryFrame.Parent = mainFrame
    setupUIListLayout(secondaryFrame)

    -- Nome do Rogue e Edict
    createTextLabel("RogueName", string.format("[%s]", getRogueName(player) or "Unknown"), UDim2.new(0.2, 0, 1, 0), secondaryFrame, Color3.fromRGB(255, 255, 255))
    createTextLabel("Edict", string.format("[%s]", getEdict(player) or "None"), UDim2.new(0.1, 0, 1, 0), secondaryFrame, Color3.fromRGB(255, 255, 255))

    -- Frame Terciário
    local tertiaryFrame = Instance.new("Frame")
    tertiaryFrame.Name = "TertiaryFrame"
    tertiaryFrame.Size = UDim2.new(1, 0, 0.2, 0)
    tertiaryFrame.Position = UDim2.new(0, 0, 0.7, 0)
    tertiaryFrame.BackgroundTransparency = 1
    tertiaryFrame.Parent = mainFrame
    setupUIListLayout(tertiaryFrame)

    -- Rótulos de Distância e Saúde
    local offsetLabel = createTextLabel("Offset", "[000]", UDim2.new(0.1, 0, 1, 0), tertiaryFrame, Color3.fromRGB(255, 255, 255))
    createUIScale(offsetLabel)

    local healthLabel = createTextLabel("Health", "[0/100]", UDim2.new(0.1, 0, 1, 0), tertiaryFrame, Color3.fromRGB(255, 255, 255))
    local healthPercentageLabel = createTextLabel("HealthPercentage", "[100%]", UDim2.new(0.1, 0, 1, 0), tertiaryFrame, Color3.fromRGB(255, 255, 255))

    -- Conecta sinais ao humanoide
    local humanoid = player.Character:FindFirstChildOfClass("Humanoid")
    if humanoid then

        -- Desconecta conexões antigas
        if characterConnections[player] then
            for _, connection in pairs(characterConnections[player]) do
                connection:Disconnect()
            end
        end
        characterConnections[player] = {}

        -- Conecta novos sinais
        table.insert(characterConnections[player], humanoid:GetPropertyChangedSignal("Health"):Connect(function()
            updateHealth(humanoid, healthLabel, healthPercentageLabel)
        end))
        table.insert(characterConnections[player], humanoid:GetPropertyChangedSignal("MaxHealth"):Connect(function()
            updateHealth(humanoid, healthLabel, healthPercentageLabel)
        end))

        -- Atualiza a saúde inicial
        updateHealth(humanoid, healthLabel, healthPercentageLabel)
    else
        print(string.format("[DEBUG] No Humanoid found for player %s. Skipping health connections.", player.Name))
    end

    -- Armazena o ESP
    espInstances[player] = billboard
    print(string.format("[DEBUG] ESP created and stored for player: %s", player.Name))
end




-- Inicialização de tabelas
local espInstances = espInstances or {}
local characterConnections = characterConnections or {}
local renderSteppedConnections = renderSteppedConnections or {}

-- Função para remover todos os ESPs
local function removeAllESPs()
    for player, esp in pairs(espInstances) do
        if esp then
            esp:Destroy()
            espInstances[player] = nil
        end

        if characterConnections[player] then
            for _, connection in pairs(characterConnections[player]) do
                connection:Disconnect()
            end
            characterConnections[player] = nil
        end
    end
end


local function connectCharacterAdded(player)
    -- Desconectar conexões antigas, se existirem
    if characterConnections[player] then
        for _, connection in pairs(characterConnections[player]) do
            connection:Disconnect()
        end
    end
    characterConnections[player] = {}

    -- Conectar ao evento CharacterAdded
    local charAddedConnection = player.CharacterAdded:Connect(function(character)
        task.spawn(function()
            -- Verificar se o ESP está ativado antes de prosseguir
            if not getgenv().PlayerESP then
                print(string.format("[DEBUG] ESP is globally disabled. Skipping update for player: %s", player.Name))
                return
            end

            -- Atualizar o ESP utilizando o fluxo já tratado no updateESP
            updateESP(player)
        end)
    end)

    table.insert(characterConnections[player], charAddedConnection)

    -- Se o Character já existir, conecta também
    if player.Character then
        task.spawn(function()
            -- Atualizar o ESP utilizando o fluxo já tratado no updateESP
            updateESP(player)
        end)
    end
end


local function initializePlayers()
    for _, player in ipairs(Players:GetPlayers()) do
        if player ~= Players.LocalPlayer then
            connectCharacterAdded(player)
        end
    end
end




local function setupUI()
    local leaderboardGui, scrollingFrame = createLeaderboard()

    -- Inicializar jogadores existentes
    initializePlayers()

    -- Rebuild leaderboard com os jogadores atuais
    rebuildLeaderboard()

    -- Handle novos jogadores entrando
    Players.PlayerAdded:Connect(function(player)
        if player ~= Players.LocalPlayer then
            connectCharacterAdded(player)
        end
        rebuildLeaderboard()
    end)

    -- Handle jogadores saindo
    Players.PlayerRemoving:Connect(function(player)
        -- Remover ESP
        if espInstances[player] then
            espInstances[player]:Destroy()
            espInstances[player] = nil
        end

        -- Desconectar conexões relacionadas ao Character
        if characterConnections[player] then
            for _, connection in pairs(characterConnections[player]) do
                connection:Disconnect()
            end
            characterConnections[player] = nil
        end

        -- Desconectar conexões RenderStepped
        if renderSteppedConnections[player] then
            renderSteppedConnections[player]:Disconnect()
            renderSteppedConnections[player] = nil
        end

        -- Resetar o observedPlayer se for o jogador removido
        if observedPlayer == player then
            observedPlayer = nil
        end

        rebuildLeaderboard()
    end)
end


setupUI()

-- VARIABLES
local player = Players.LocalPlayer
local playerGui = player:WaitForChild("PlayerGui")

-- UI CREATION
-- ScreenGui
local screenGui = Instance.new("ScreenGui")
screenGui.Name = "Pocoyo"
screenGui.Parent = playerGui
screenGui.Enabled = false -- Initially disabled
screenGui.ResetOnSpawn = false -- Impede que o GUI seja destruído ao respawnar

-- MainFrame
local mainFrame = Instance.new("Frame")
mainFrame.AnchorPoint = Vector2.new(0.5, 0.5)
mainFrame.Position = UDim2.new(0.5, 0, 0.5, 0)
mainFrame.Size = UDim2.new(0.5, 0, 0.5, 0)
mainFrame.Name = "MainFrame"
mainFrame.Parent = screenGui

local mainFrame_UIAspect = Instance.new("UIAspectRatioConstraint")
mainFrame_UIAspect.AspectRatio = 1.858
mainFrame_UIAspect.AspectType = Enum.AspectType.FitWithinMaxSize
mainFrame_UIAspect.Parent = mainFrame

-- Background
local background = Instance.new("Frame")
background.AnchorPoint = Vector2.new(0.5, 0.5)
background.BackgroundColor3 = Color3.fromRGB(76, 76, 76)
background.BorderColor3 = Color3.fromRGB(45, 61, 49)
background.Size = UDim2.new(1, 0, 1, 0)
background.Position = UDim2.new(0.5, 0, 0.5, 0)
background.Name = "Background"
background.Parent = mainFrame

-- Title
local title = Instance.new("TextLabel")
title.AnchorPoint = Vector2.new(0.5, 0.5)
title.BackgroundColor3 = Color3.fromRGB(255, 147, 255)
title.BackgroundTransparency = 0.5
title.Position = UDim2.new(0.5, 0, 0.05, 0)
title.Size = UDim2.new(0.5, 0, 0.1, 0)
title.Font = Enum.Font.SourceSansBold
title.Text = "Pocoyo Hub"
title.TextSize = 30
title.TextColor3 = Color3.fromRGB(251, 142, 255)
title.TextStrokeTransparency = 0.5
title.Parent = background

-- Buttons Frame
local buttonsFrame = Instance.new("Frame")
buttonsFrame.BackgroundColor3 = Color3.fromRGB(76, 76, 76)
buttonsFrame.Position = UDim2.new(0.02, 0, 0.12, 0)
buttonsFrame.Size = UDim2.new(0.9, 0, 0.08, 0)
buttonsFrame.Name = "Buttons"
buttonsFrame.BorderSizePixel = 0
buttonsFrame.Parent = mainFrame

-- ESP Button
local espButton = Instance.new("TextButton")
espButton.BackgroundColor3 = Color3.fromRGB(21, 255, 255)
espButton.Size = UDim2.new(0.1, 0, 1, 0)
espButton.Font = Enum.Font.SourceSansBold
espButton.Text = "ESP"
espButton.TextSize = 14
espButton.TextStrokeTransparency = 0.5
espButton.Parent = buttonsFrame

-- ESP Frame
local espFrame = Instance.new("Frame")
espFrame.BackgroundTransparency = 1
espFrame.Size = UDim2.new(1, 0, 1, 0)
espFrame.Name = "ESP"
espFrame.Parent = mainFrame

-- Player ESP
local playerESPFrame = Instance.new("Frame")
playerESPFrame.BackgroundTransparency = 0.9
playerESPFrame.Position = UDim2.new(0.03, 0, 0.3, 0)
playerESPFrame.Size = UDim2.new(0.2, 0, 0.1, 0)
playerESPFrame.Name = "PlayerESPFrame"
playerESPFrame.Parent = espFrame

-- ESP Text Label
local playerESPLabel = Instance.new("TextLabel")
playerESPLabel.BackgroundTransparency = 1
playerESPLabel.Size = UDim2.new(1, 0, 1, 0)
playerESPLabel.Font = Enum.Font.SourceSansBold
playerESPLabel.Text = "Player ESP"
playerESPLabel.TextSize = 14
playerESPLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
playerESPLabel.TextXAlignment = Enum.TextXAlignment.Left
playerESPLabel.Parent = playerESPFrame

-- Toggle Button (ON/OFF)
local playerToggleButton = Instance.new("TextButton")
playerToggleButton.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
playerToggleButton.BackgroundTransparency = 1
playerToggleButton.Size = UDim2.new(1, 0, 1, 0)
playerToggleButton.Font = Enum.Font.SourceSansBold
playerToggleButton.Text = "OFF"
playerToggleButton.TextSize = 14
playerToggleButton.TextColor3 = Color3.fromRGB(255, 0, 0)
playerToggleButton.TextStrokeTransparency = 1
playerToggleButton.Name = "PlayerToggleButton"
playerToggleButton.TextXAlignment = Enum.TextXAlignment.Right
playerToggleButton.Parent = playerESPFrame

-- Trinket ESP
local trinketESPFrame = Instance.new("Frame")
trinketESPFrame.BackgroundTransparency = 0.9
trinketESPFrame.Position = UDim2.new(0.03, 0, 0.45, 0)
trinketESPFrame.Size = UDim2.new(0.2, 0, 0.1, 0)
trinketESPFrame.Name = "TrinketESPFrame"
trinketESPFrame.Parent = espFrame

-- Trinket ESP Text Label
local trinketESPLabel = Instance.new("TextLabel")
trinketESPLabel.BackgroundTransparency = 1
trinketESPLabel.Size = UDim2.new(1, 0, 1, 0)
trinketESPLabel.Font = Enum.Font.SourceSansBold
trinketESPLabel.Text = "Trinket ESP"
trinketESPLabel.TextSize = 14
trinketESPLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
trinketESPLabel.TextXAlignment = Enum.TextXAlignment.Left
trinketESPLabel.Parent = trinketESPFrame

-- Trinket Toggle Button (ON/OFF)
local trinketToggleButton = Instance.new("TextButton")
trinketToggleButton.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
trinketToggleButton.BackgroundTransparency = 1
trinketToggleButton.Size = UDim2.new(1, 0, 1, 0)
trinketToggleButton.Font = Enum.Font.SourceSansBold
trinketToggleButton.Text = "OFF"
trinketToggleButton.TextSize = 14
trinketToggleButton.TextColor3 = Color3.fromRGB(255, 0, 0)
trinketToggleButton.TextStrokeTransparency = 1
trinketToggleButton.Name = "TrinketToggleButton"
trinketToggleButton.TextXAlignment = Enum.TextXAlignment.Right
trinketToggleButton.Parent = trinketESPFrame

-- UI Layout
local uiLayout = Instance.new("UIListLayout")
uiLayout.Padding = UDim.new(0.05, 0)
uiLayout.FillDirection = Enum.FillDirection.Horizontal
uiLayout.HorizontalAlignment = Enum.HorizontalAlignment.Left
uiLayout.VerticalAlignment = Enum.VerticalAlignment.Center
uiLayout.Parent = buttonsFrame

-- Corners
local cornerTitle = Instance.new("UICorner")
cornerTitle.CornerRadius = UDim.new(0, 8)
cornerTitle.Parent = title

local cornerButton = Instance.new("UICorner")
cornerButton.CornerRadius = UDim.new(0.2, 0)
cornerButton.Parent = espButton

local cornerToggle = Instance.new("UICorner")
cornerToggle.CornerRadius = UDim.new(0.1, 0)
cornerToggle.Parent = playerToggleButton

local cornerToggle2 = Instance.new("UICorner")
cornerToggle.CornerRadius = UDim.new(0.1, 0)
cornerToggle.Parent = trinketToggleButton

-- FUNCTIONALITY
-- Toggle ScreenGui Visibility with INSERT
UserInputService.InputBegan:Connect(function(input, gameProcessed)
    if gameProcessed then return end
    if input.KeyCode == Enum.KeyCode.Insert then
        screenGui.Enabled = not screenGui.Enabled
    end
end)

-- Toggle ESP Functionality
playerToggleButton.MouseButton1Click:Connect(function()
    getgenv().PlayerESP = not getgenv().PlayerESP
    if getgenv().PlayerESP then
        print("ESP Enabled")
        playerToggleButton.Text = "ON"
        playerToggleButton.TextColor3 = Color3.fromRGB(0, 255, 0)

        -- Ensure ESPs are created for all players
        for _, player in ipairs(Players:GetPlayers()) do
            if player ~= Players.LocalPlayer then
                updateESP(player)
            end
        end
    else
        print("ESP Disabled")
        playerToggleButton.Text = "OFF"
        playerToggleButton.TextColor3 = Color3.fromRGB(255, 0, 0)

        -- Remove all existing ESPs
        removeAllESPs()
    end
end)

-- Monitorar CharacterAdded para recriar o SuperLeaderboard
player.CharacterAdded:Connect(function()
    print("[DEBUG] CharacterAdded detected. Rebuilding SuperLeaderboard.")
    wait(1) -- Pequeno atraso para garantir o carregamento do PlayerGui
    rebuildLeaderboard()
end)

-- Inicializar o SuperLeaderboard na primeira execução
print("[DEBUG] Initializing SuperLeaderboard...")
rebuildLeaderboard()

-- TABLE: Stores all parts with a BillboardGui
local partsWithBillboard = {}

-- FUNCTION: Toggles the visibility of all BillboardGui elements
local function toggleAllVisibility(isVisible)
    if #partsWithBillboard == 0 then
        warn("[DEBUG] No parts available in partsWithBillboard to toggle visibility.")
        return
    end

    for _, part in ipairs(partsWithBillboard) do
        local billboardGui = part:FindFirstChild("BillboardGui")
        if billboardGui and billboardGui:IsA("BillboardGui") then
            billboardGui.Enabled = isVisible
        else
            warn("No BillboardGui found on part:", part.Name)
        end
    end
end

-- Toggle Trinket ESP Functionality
trinketToggleButton.MouseButton1Click:Connect(function()
    getgenv().TrinketESP = not getgenv().TrinketESP

    if getgenv().TrinketESP then
        print("Trinket ESP Enabled")
        trinketToggleButton.Text = "ON"
        trinketToggleButton.TextColor3 = Color3.fromRGB(0, 255, 0) -- Green for ON

        -- Enable visibility for all BillboardGui elements
        toggleAllVisibility(true)
    else
        print("Trinket ESP Disabled")
        trinketToggleButton.Text = "OFF"
        trinketToggleButton.TextColor3 = Color3.fromRGB(255, 0, 0) -- Red for OFF

        -- Disable visibility for all BillboardGui elements
        toggleAllVisibility(false)
    end
end)

-- CONSTANTS: Rarity definitions and default configurations
local rarities = {
    Common = {
        default_color = Color3.fromRGB(157, 157, 157), -- White
        assets = {
            {asset_id = "rbxassetid://5204003946", name = "Goblet"},
            {asset_id = "rbxassetid://5196782997", name = "Old Ring"},
            {asset_id = "rbxassetid://5196577540", name = "Old Amulet"},
            {asset_id = "rbxassetid://5196551436", name = "Amulet"},
            {asset_id = "rbxassetid://5196776695", name = "Ring"}
        },
        materials = {
            [Enum.Material.Slate] = {name = "Idol of the Forgotten", color = nil} -- Uses default color
        }
    },
    Rare = {
        default_color = Color3.fromRGB(0, 0, 255), -- Blue
        assets = {
            {asset_id = "rbxassetid://5204453430", name = "Scroll", color = Color3.fromRGB(157, 89, 22)}
        },
        materials = {
            [Enum.Material.Glass] = {name = "Opal", color = nil} -- Uses default color
        }
    }
}

-- FUNCTION: Retrieves asset information based on AssetId
local AssetManager = {}
function AssetManager:getAssetInfo(asset_id)
    for rarity, data in pairs(rarities) do
        for _, asset in ipairs(data.assets) do
            if asset.asset_id == asset_id then
                return {
                    rarity = rarity,
                    name = asset.name or "Unknown",
                    color = asset.color or data.default_color
                }
            end
        end
    end
    return nil -- Returns nil if no match is found
end

-- FUNCTION: Retrieves rarity info based on material
function AssetManager:getMaterialInfo(material)
    for rarity, data in pairs(rarities) do
        if data.materials and data.materials[material] then
            local material_data = data.materials[material]
            return {
                rarity = rarity,
                name = material_data.name,
                color = material_data.color or data.default_color
            }
        end
    end
    return nil -- Returns nil if no material match is found
end

-- FUNCTION: Handles new parts added to the workspace
local function handleNewPart(part)
    if not (part:IsA("BasePart") and part.Name == "Part") then
        return -- Guard clause to exit early for invalid parts
    end

    local id_value = part:FindFirstChild("ID")
    if not (id_value and id_value:IsA("StringValue")) then
        return -- If no valid ID, exit
    end

    print("Part has ID:", id_value.Value)

    local item_name = "Unknown"
    local item_color = Color3.fromRGB(128, 128, 128) -- Default gray color

    if part:IsA("MeshPart") and part.MeshId and part.MeshId:match("^rbxassetid://") then
        local asset_info = AssetManager:getAssetInfo(part.MeshId)
        if asset_info then
            item_name = asset_info.name
            item_color = asset_info.color
            print("New Part added:", item_name, "of rarity:", asset_info.rarity)
        else
            print("MeshId not found in rarities table:", part.MeshId)
        end
    else
        -- Fallback to material-based rarity check
        local material_info = AssetManager:getMaterialInfo(part.Material)
        if material_info then
            item_name = material_info.name
            item_color = material_info.color
            print("New Part identified by material:", item_name, "of rarity:", material_info.rarity)
        else
            print("Part material not found in rarities table:", part.Material)
        end
    end

    -- Create BillboardGui to display item information
    local billboard_gui = Instance.new("BillboardGui")
    billboard_gui.Name = "BillboardGui"
    billboard_gui.Adornee = part
    billboard_gui.Size = UDim2.new(0, 100, 0, 100)
    billboard_gui.AlwaysOnTop = true
    billboard_gui.MaxDistance = math.huge
    billboard_gui.ResetOnSpawn = true
    billboard_gui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    billboard_gui.Enabled = getgenv().TrinketESP == true -- Visibility depends on global variable
    billboard_gui.Parent = part

    local text_label = Instance.new("TextLabel")
    text_label.Name = "TextLabel"
    text_label.AnchorPoint = Vector2.new(0.5, 0.5)
    text_label.Position = UDim2.new(0.5, 0, 0.5, 0)
    text_label.Size = UDim2.new(1, 0, 1, 0)
    text_label.BackgroundTransparency = 1
    text_label.Text = item_name
    text_label.Font = Enum.Font.SourceSansBold
    text_label.TextSize = 14
    text_label.TextColor3 = item_color
    text_label.TextStrokeColor3 = Color3.fromRGB(0, 0, 0)
    text_label.TextStrokeTransparency = 0.5
    text_label.TextXAlignment = Enum.TextXAlignment.Center
    text_label.TextYAlignment = Enum.TextYAlignment.Center
    text_label.Parent = billboard_gui

    -- Prevent duplicate additions
    if not table.find(partsWithBillboard, part) then
        table.insert(partsWithBillboard, part)
    end
end

-- FUNCTION: Initializes part monitoring in the workspace
local function initializeWorkspaceMonitoring()
    workspace.ChildAdded:Connect(handleNewPart)

    -- Optional: Process existing parts in the workspace
    for _, child in ipairs(workspace:GetChildren()) do
        handleNewPart(child)
    end
end

-- Main Execution: Start monitoring the workspace
initializeWorkspaceMonitoring()

