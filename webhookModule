-- WebhookModule.lua
--[[
    WebhookModule: A module for handling Discord webhook interactions
    Features:
    - Create and send embeds to Discord webhooks
    - Configurable embed creation
    - Error handling and validation
    - Type checking for inputs
]]

local HttpService = game:GetService("HttpService")

-- Constants
local DEFAULT_COLOR = 16777215 -- White
local DEFAULT_USERNAME = "Default User"
local SUCCESS_STATUS_CODE = 204

-- Types
type EmbedData = {
    title: string?,
    description: string?,
    color: number?,
    footer: {
        text: string,
        icon_url: string?
    }?,
    thumbnail: {
        url: string
    }?,
    timestamp: string?
}

type WebhookData = {
    username: string?,
    avatar_url: string?,
    embeds: {EmbedData}
}

local WebhookModule = {}

-- Private functions
local function validateWebhookURL(url: string): boolean
    return type(url) == "string" and url:match("^https://discord.com/api/webhooks/")
end

local function createTimestamp(): string
    return os.date("!%Y-%m-%dT%H:%M:%SZ")
end

-- Public functions
function WebhookModule:CreateEmbed(config: EmbedData): EmbedData
    return {
        title = config.title or "Default Title",
        description = config.description or "Default Description",
        color = config.color or DEFAULT_COLOR,
        footer = config.footer and {
            text = config.footer.text,
            icon_url = config.footer.icon_url or ""
        } or nil,
        thumbnail = config.thumbnail and {
            url = config.thumbnail.url
        } or nil,
        timestamp = createTimestamp()
    }
end

function WebhookModule:SendMessage(webhookURL: string, config: WebhookData): (boolean, string?)
    -- Input validation
    if not validateWebhookURL(webhookURL) then
        return false, "Invalid webhook URL format"
    end

    if not config.embeds or #config.embeds == 0 then
        return false, "No embeds provided"
    end

    -- Prepare request data
    local data = {
        username = config.username or DEFAULT_USERNAME,
        avatar_url = config.avatar_url or "",
        embeds = config.embeds
    }

    -- Encode data
    local success, jsonData = pcall(function()
        return HttpService:JSONEncode(data)
    end)

    if not success then
        return false, "Failed to encode data: " .. tostring(jsonData)
    end

    -- Send request
    local success, response = pcall(function()
        return request({
            Url = webhookURL,
            Method = "POST",
            Headers = {
                ["Content-Type"] = "application/json"
            },
            Body = jsonData
        })
    end)

    -- Handle response
    if not success then
        return false, "Request failed: " .. tostring(response)
    end

    if response.StatusCode == SUCCESS_STATUS_CODE then
        return true, "Message sent successfully"
    end

    return false, "Unexpected response. Status code: " .. tostring(response.StatusCode)
end

return WebhookModule
